
if (Meteor.isClient) {

  Template.matchReplay.onRendered(function () {  
    console.log(this.data);
    Session.set('index', 0);
    Session.set('replayLen', this.data.replay.length);
  });

  Template.matchReplay.events({
    'click #next': function(event) {
      if (Session.get('index') < Session.get('replayLen') - 1) {
        Session.set('index', Session.get('index') + 1);
      }
      
    },
    'click #prev': function(event) {
      if (Session.get('index') > 0) {
        Session.set('index', Session.get('index') - 1);
      }
    },
    'click #first': function(event) {
      Session.set('index', 0);
    },
    'click #last': function(event) {
      Session.set('index', Session.get('replayLen') - 1);
    }
    
  });

  Template.matchReplay.helpers({

    replayState: function() {
      return this.replay[Session.get('index')];
    },

    matchResult: function() {
      return this.result;
    }

  });
}

Router.route('match_replay', {
  path: '/match_replay/:_id',
  onBeforeAction: function () {
    if (!Meteor.user()) {
      // Router.go('login');
      return;
    }
    this.next();
  },
  waitOn:function(){
    return Meteor.subscribe('matches', this.params._id);
  },
  action : function () {
    this.render('matchReplay');
  },
  data: function () {
    // ***
    // Uses Meteor.Collection.ObjectID because it's been generated by Java driver used by server code
    //return Matches.findOne({ _id: new Meteor.Collection.ObjectID(this.params._id)});
    return Matches.findOne(new Meteor.Collection.ObjectID(this.params._id));
  }
});

